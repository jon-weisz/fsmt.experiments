<scxml xmlns="http://www.w3.org/2005/07/scxml" xmlns:my_ns="de.unibi.citec.clf.fsmt" id="icub-humanoids-balltracking" initial="initialise_test" version="1.0">
    <datamodel>
        <data id="environment">
            <variable val="$PATH:$prefix/bin/:/opt/morse-blender-2.65-py-3.3/bin/" var="PATH" />
            <variable val="$prefix" var="PREFIX" />
            <variable val="$ROS_DISTRO" var="ROS" />
            <variable val="/opt/morse-blender-2.65-py-3.3/bin/blender" var="MORSE_BLENDER" />
            <variable val="localhost:0" var="DISPLAY" />
        </data>
        <data id="hosts">
            <hostinfo ip="127.0.0.1" name="localhost" />
        </data>
        <data id="component_bundle">
            <component val="default">
                <command val="ls $FSMFSM" />
                <path val="/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="False" criteria="" ongoing="False" timeout="3" val="pid" />
                </check_execution>
            </component>
            <component val="roscore">
                <command val="roscore" />
                <path val="/opt/ros/$ROS/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="started core service [/rosout]" ongoing="False" timeout="10" val="stdout" />
                    <check_type blocking=" True" criteria="" ongoing=" True" timeout=" 2" val=" pid" />
                </check_execution>
            </component>
            <component val="rs_mongo_store">
                <command val="roslaunch mongodb_store mongodb_store.launch db_path:=/opt/strands/mongodb_store" />
                <path val="/opt/ros/$ROS/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="[initandlisten] connection accepted" ongoing="False" timeout="30" val="stdout" />
                    <check_type blocking=" True" criteria="" ongoing=" True" timeout=" 2" val=" pid" />
                </check_execution>
            </component>
            <component val="rr_insert_map">
                <command val="rosrun topological_utils insert_map.py $(rospack find strands_uol_sim)/resources/mht.tpl robolab mht" />
                <path val="/opt/ros/$ROS/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="WayPoint1" ongoing="False" timeout="3" val="stdout" />
                    <check_type blocking=" True" criteria="" ongoing=" False" timeout=" 0.1" val=" pid" />
                </check_execution>
            </component>
            <component val="rs_morse_simulation">
                <command val="roslaunch strands_morse uol_mht_morse.launch" />
                <path val="/opt/ros/$ROS/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="Exporting an image of capsize: (640" ongoing="False" timeout="180" val="stdout" />
                    <check_type blocking=" True" criteria=" 480) pixels" ongoing=" True" timeout=" 2" val=" pid" />
                </check_execution>
            </component>
            <component val="rs_mht_nav">
                <command val="roslaunch strands_uol_sim mht_nav.launch" />
                <path val="/opt/ros/$ROS/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="odom received!" ongoing="False" timeout="180" val="stdout" />
                    <check_type blocking=" True" criteria="" ongoing=" True" timeout=" 2" val=" pid" />
                </check_execution>
            </component>
            <component val="reach_wp_17">
                <command val="rosrun topological_navigation nav_client.py WayPoint17" />
                <path val="/opt/ros/$ROS/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="success: True" ongoing="False" timeout="180" val="stdout" />
                    <check_type blocking=" True" criteria="" ongoing=" False" timeout=" 1" val=" pid" />
                </check_execution>
            </component>
            <component val="reach_wp_18">
                <command val="rosrun topological_navigation nav_client.py WayPoint18" />
                <path val="/opt/ros/$ROS/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="success: True" ongoing="False" timeout="180" val="stdout" />
                    <check_type blocking=" True" criteria="" ongoing=" False" timeout=" 1" val=" pid" />
                </check_execution>
            </component>
            <component val="reach_wp_19">
                <command val="rosrun topological_navigation nav_client.py WayPoint19" />
                <path val="/opt/ros/$ROS/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="success: True" ongoing="False" timeout="240" val="stdout" />
                    <check_type blocking=" True" criteria="" ongoing=" False" timeout=" 1" val=" pid" />
                </check_execution>
            </component>
            <component val="reach_wp_20">
                <command val="rosrun topological_navigation nav_client.py WayPoint20" />
                <path val="/opt/ros/$ROS/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="success: True" ongoing="False" timeout="180" val="stdout" />
                    <check_type blocking=" True" criteria="" ongoing=" False" timeout=" 1" val=" pid" />
                </check_execution>
            </component>
            <component val="reach_wp_21">
                <command val="rosrun topological_navigation nav_client.py WayPoint21" />
                <path val="/opt/ros/$ROS/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="success: True" ongoing="False" timeout="180" val="stdout" />
                    <check_type blocking=" True" criteria="" ongoing=" False" timeout=" 1" val=" pid" />
                </check_execution>
            </component>
        </data>
    </datamodel>
    <transition event="unsatisfied_criteria" target="criteria_error">
        <log expr="'Received unsatisfied_criteria event!'" label="ERROR" />
    </transition>
    <transition event="external_abortion" target="abortion_error">
        <log expr="'Received unsatisfied_criteria event!'" label="ERROR" />
    </transition>
    <transition event="execute_program.fail" target="execution_error">
        <log expr="'Recieved execution_error event!'" label="ERROR" />
    </transition>
    <state id="initialise_test">
        <onentry>
            <log expr="'Entering State initialise_test'" label="INFO" />
        </onentry>
        <transition target="run_test" />
        <onexit>
            <log expr="'Exiting State: initialise_test'" label="INFO" />
        </onexit>
    </state>
    <state id="run_test" initial="state_0">
        <state id="state_0">
            <onentry>
                <log expr="'Entering State: state_0'" label="INFO" />
                <my_ns:execute_program value="roscore" />
            </onentry>
            <transition event="roscore.execute_program.success" target="state_0_1" />
            <onexit>
                <log expr="'Exiting State: state_0'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_1">
            <onentry>
                <log expr="'Entering State: state_0_1'" label="INFO" />
                <my_ns:execute_program value="rs_mongo_store" />
            </onentry>
            <transition event="rs_mongo_store.execute_program.success" target="state_0_2" />
            <onexit>
                <log expr="'Exiting State: state_0_1'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_2">
            <onentry>
                <log expr="'Entering State: state_0_2'" label="INFO" />
                <my_ns:execute_program value="rr_insert_map" />
            </onentry>
            <transition event="rr_insert_map.execute_program.success" target="state_0_3" />
            <onexit>
                <log expr="'Exiting State: state_0_2'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_3">
            <onentry>
                <log expr="'Entering State: state_0_3'" label="INFO" />
                <my_ns:execute_program value="rs_morse_simulation" />
            </onentry>
            <transition event="rs_morse_simulation.execute_program.success" target="state_0_4" />
            <onexit>
                <log expr="'Exiting State: state_0_3'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_4">
            <onentry>
                <log expr="'Entering State: state_0_4'" label="INFO" />
                <my_ns:execute_program value="rs_mht_nav" />
            </onentry>
            <transition event="rs_mht_nav.execute_program.success" target="state_0_5" />
            <onexit>
                <log expr="'Exiting State: state_0_4'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_5">
            <onentry>
                <log expr="'Entering State: state_0_5'" label="INFO" />
                <my_ns:execute_program value="reach_wp_17" />
            </onentry>
            <transition event="reach_wp_17.execute_program.success" target="state_0_6" />
            <onexit>
                <log expr="'Exiting State: state_0_5'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_6">
            <onentry>
                <log expr="'Entering State: state_0_6'" label="INFO" />
                <my_ns:execute_program value="reach_wp_20" />
            </onentry>
            <transition event="reach_wp_20.execute_program.success" target="state_0_7" />
            <onexit>
                <log expr="'Exiting State: state_0_6'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_7">
            <onentry>
                <log expr="'Entering State: state_0_7'" label="INFO" />
                <my_ns:execute_program value="reach_wp_21" />
            </onentry>
            <transition event="reach_wp_21.execute_program.success" target="pre_result_assessment_wait" />
            <onexit>
                <log expr="'Exiting State: state_0_7'" label="INFO" />
            </onexit>
        </state>
        <state id="pre_result_assessment_wait">
            <onentry>
                <log expr="'Entering State: Wait (collecting data for 240 seconds)'" label="INFO" />
                <send delay="'240s'" event="wait.finish" />
            </onentry>
            <transition event="wait.finish" target="result_assessment" />
            <onexit>
                <log expr="'Exiting State: Wait (collected data for 240 seconds)'" label="INFO" />
            </onexit>
        </state>
    </state>
    <state id="result_assessment" initial="clean">
        <state id="clean">
            <onentry>
                <log expr="'Entering State: Cleanup components'" label="INFO" />
                <my_ns:cleanUp expr="executable" value="" />
            </onentry>
            <transition target="assessment_state_0" />
            <onexit>
                <log expr="'Exiting State: Done cleaning up'" label="INFO" />
            </onexit>
        </state>
        <state id="assessment_state_0">
            <onentry>
                <log expr="'Entering State: assessment_state_0'" label="INFO" />
                <my_ns:execute_program value="reach_wp_20" />
            </onentry>
            <transition event="reach_wp_20.execute_program.success" target="assessment_state_0_1" />
            <onexit>
                <log expr="'Exiting State: assessment_state_0'" label="INFO" />
            </onexit>
        </state>
        <state id="assessment_state_0_1">
            <onentry>
                <log expr="'Entering State: assessment_state_0_1'" label="INFO" />
                <my_ns:execute_program value="reach_wp_20" />
            </onentry>
            <transition event="reach_wp_20.execute_program.success" target="assessment_pre_exit_test_wait" />
            <onexit>
                <log expr="'Exiting State: assessment_state_0_1'" label="INFO" />
            </onexit>
        </state>
        <state id="assessment_pre_exit_test_wait">
            <onentry>
                <log expr="'Entering State: Wait (collecting data for 20 seconds)'" label="INFO" />
                <send delay="'20s'" event="wait.finish" />
            </onentry>
            <transition event="wait.finish" target="exit_test" />
            <onexit>
                <log expr="'Exiting State: Wait (collected data for 20 seconds)'" label="INFO" />
            </onexit>
        </state>
    </state>
    <state id="criteria_error">
        <onentry>
            <log expr="'criteria_error state entered - Exiting!'" label="ERROR" />
            <my_ns:error value="criteria" />
        </onentry>
        <transition target="exit_test" />
    </state>
    <state id="execution_error">
        <onentry>
            <log expr="'execution_error state entered - Exiting!'" label="ERROR" />
            <my_ns:error value="executionFail" />
        </onentry>
        <transition target="exit_test" />
    </state>
    <state id="abortion_error">
        <onentry>
            <log expr="'execution_error state entered - Exiting!'" label="ERROR" />
            <my_ns:error value="abortion" />
        </onentry>
        <transition target="exit_test" />
    </state>
    <final id="exit_test">
        <onentry>
            <log expr="'Entering State: exit_test'" label="INFO" />
            <my_ns:cleanUp expr="executable" value="" />
        </onentry>
        <onexit>
            <log expr="'Exiting State: exit_test'" label="INFO" />
        </onexit>
    </final>
</scxml>
