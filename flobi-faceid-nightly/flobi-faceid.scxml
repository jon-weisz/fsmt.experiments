<scxml xmlns="http://www.w3.org/2005/07/scxml" xmlns:my_ns="de.unibi.citec.clf.fsmt" id="flobi-faceid" initial="initialise_test" version="1.0">
    <datamodel>
        <data id="environment">
            <variable val="0.0" var="FLOBI_CAM_TRANSLATION_X" />
            <variable val="0.1" var="FLOBI_CAM_TRANSLATION_Y" />
            <variable val="0.35" var="FLOBI_CAM_TRANSLATION_Z" />
        </data>
        <data id="hosts">
            <hostinfo ip="127.0.0.1" name="localhost" />
        </data>
        <data id="component_bundle">
            <component val="default">
                <command val="ls $FSMFSM" />
                <path val="/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="False" criteria="" ongoing="False" timeout="3" val="pid" />
                </check_execution>
            </component>
            <component val="spread">
                <command val="spread -n localhost" />
                <path val="$prefix/sbin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="Membership id is" ongoing="False" timeout="10" val="stdout" />
                    <check_type blocking="True" criteria="" ongoing="True" timeout="2" val="pid" />
                </check_execution>
            </component>
            <component val="roscore">
                <command val="roscore" />
                <path val="/opt/ros/indigo/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="started core service [/rosout]" ongoing="False" timeout="15" val="stdout" />
                    <check_type blocking="True" criteria="" ongoing="True" timeout="2" val="pid" />
                </check_execution>
            </component>
            <component val="image_publisher">
                <command val="ocvf_image_publisher_ros.py $prefix/share/ocvfacerec/raw" />
                <path val="$prefix/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="&gt;&gt; Image 0" ongoing="False" timeout="20" val="stdout" />
                    <check_type blocking="True" criteria="" ongoing="True" timeout="2" val="pid" />
                </check_execution>
            </component>
            <component val="facerecognizer">
                <command val="ocvf_recognizer_ros.py -c $prefix/share/ocvfacerec/haarcascade_frontalface_alt2.xml -s /ocvfacerec/static_image $prefix/share/ocvfacerec/individuals.pkl" />
                <path val="$prefix/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="True" timeout="1" val="pid" />
                </check_execution>
            </component>
            <component val="xsc3">
                <command val="xsc3_server $prefix/etc/xsc3_server/config_flobi3_virtual.ini" />
                <path val="$prefix/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="True" timeout="1" val="pid" />
                    <check_type blocking="True" criteria="publish health state" ongoing="False" timeout=" 10" val="stdout" />
                </check_execution>
            </component>
            <component val="hlc_server">
                <command val="hlc_server /flobi" />
                <path val="$prefix/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="True" timeout="1" val="pid" />
                    <check_type blocking="True" criteria="done. server ready" ongoing="False" timeout="10" val="stdout" />
                </check_execution>
            </component>
            <component val="sim">
                <command val="bash $prefix/bin/flobi-sim.sh --geometry 650x1060+0,0" />
                <path val="/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="True" timeout="1" val="pid" />
                    <check_type blocking="True" criteria="SCENE INITIALIZED" ongoing="False" timeout="30" val="stdout" />
                </check_execution>
            </component>
            <component val="personchecker">
                <command val="python $prefix/bin/flobi_face_id_personchecker.py" />
                <path val="/usr/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="False" timeout="1" val="pid" />
                    <check_type blocking="True" criteria="High Level Control Client successfully initialized" ongoing="False" timeout="10" val="stdout" />
                </check_execution>
            </component>
            <component val="usb_cam">
                <command val="roslaunch $prefix/share/ocvfacerec/ros_cam_node/ros_cam_node.launch" />
                <path val="/opt/ros/indigo/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="True" timeout="1" val="pid" />
                </check_execution>
            </component>
            <component val="liverecognizer">
                <command val="ocvf_recognizer_ros.py -c $prefix/share/ocvfacerec/haarcascade_frontalface_alt2.xml $prefix/share/ocvfacerec/individuals.pkl" />
                <path val="$prefix/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="True" timeout="1" val="pid" />
                </check_execution>
            </component>
            <component val="rqt">
                <command val="rqt_plot /ocvrecognizer/ros/people[0].position" />
                <path val="/opt/ros/indigo/bin/" />
                <execution_host val="localhost" />
                <check_execution val="True">
                    <check_type blocking="True" criteria="" ongoing="False" timeout="1" val="pid" />
                </check_execution>
            </component>
            <component val="write_tra">
                <command val="echo $FSMDAT/state_component_run_test.xml &gt; /tmp/xml_file" />
                <path val="/bin/" />
                <execution_host val="localhost" />
                <check_execution val="False">
                    <check_type blocking="True" criteria="" ongoing="False" timeout="1" val="pid" />
                </check_execution>
            </component>
            <component val="spread_remove">
                <command val="rm -f /tmp/4803" />
                <path val="/bin/" />
                <execution_host val="localhost" />
                <check_execution val="False">
                    <check_type blocking="True" criteria="" ongoing="False" timeout="1" val="pid" />
                </check_execution>
            </component>
        </data>
    </datamodel>
    <transition event="unsatisfied_criteria" target="criteria_error">
        <log expr="'Received unsatisfied_criteria event!'" label="ERROR" />
    </transition>
    <transition event="external_abortion" target="abortion_error">
        <log expr="'Received unsatisfied_criteria event!'" label="ERROR" />
    </transition>
    <transition event="execute_program.fail" target="execution_error">
        <log expr="'Recieved execution_error event!'" label="ERROR" />
    </transition>
    <state id="initialise_test">
        <onentry>
            <log expr="'Entering State initialise_test'" label="INFO" />
        </onentry>
        <transition target="run_test" />
        <onexit>
            <log expr="'Exiting State: initialise_test'" label="INFO" />
        </onexit>
    </state>
    <state id="run_test" initial="state_0">
        <state id="state_0">
            <onentry>
                <log expr="'Entering State: state_0'" label="INFO" />
                <my_ns:execute_program value="spread_remove" />
            </onentry>
            <transition event="spread_remove.execute_program.success" target="state_0_1" />
            <onexit>
                <log expr="'Exiting State: state_0'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_1">
            <onentry>
                <log expr="'Entering State: state_0_1'" label="INFO" />
                <my_ns:execute_program value="spread" />
            </onentry>
            <transition event="spread.execute_program.success" target="state_0_2" />
            <onexit>
                <log expr="'Exiting State: state_0_1'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_2">
            <onentry>
                <log expr="'Entering State: state_0_2'" label="INFO" />
                <my_ns:execute_program value="roscore" />
            </onentry>
            <transition event="roscore.execute_program.success" target="state_0_3" />
            <onexit>
                <log expr="'Exiting State: state_0_2'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_3">
            <onentry>
                <log expr="'Entering State: state_0_3'" label="INFO" />
                <my_ns:execute_program value="xsc3" />
            </onentry>
            <transition event="xsc3.execute_program.success" target="state_0_4" />
            <onexit>
                <log expr="'Exiting State: state_0_3'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_4">
            <onentry>
                <log expr="'Entering State: state_0_4'" label="INFO" />
                <my_ns:execute_program value="hlc_server" />
            </onentry>
            <transition event="hlc_server.execute_program.success" target="state_0_5" />
            <onexit>
                <log expr="'Exiting State: state_0_4'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_5">
            <onentry>
                <log expr="'Entering State: state_0_5'" label="INFO" />
                <my_ns:execute_program value="sim" />
            </onentry>
            <transition event="sim.execute_program.success" target="state_0_6" />
            <onexit>
                <log expr="'Exiting State: state_0_5'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_6">
            <onentry>
                <log expr="'Entering State: state_0_6'" label="INFO" />
                <my_ns:execute_program value="image_publisher" />
            </onentry>
            <transition event="image_publisher.execute_program.success" target="state_0_7" />
            <onexit>
                <log expr="'Exiting State: state_0_6'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_7">
            <onentry>
                <log expr="'Entering State: state_0_7'" label="INFO" />
                <my_ns:execute_program value="facerecognizer" />
            </onentry>
            <transition event="facerecognizer.execute_program.success" target="state_0_8" />
            <onexit>
                <log expr="'Exiting State: state_0_7'" label="INFO" />
            </onexit>
        </state>
        <state id="state_0_8">
            <onentry>
                <log expr="'Entering State: state_0_8'" label="INFO" />
                <my_ns:execute_program value="personchecker" />
            </onentry>
            <transition event="personchecker.execute_program.success" target="pre_result_assessment_wait" />
            <onexit>
                <log expr="'Exiting State: state_0_8'" label="INFO" />
            </onexit>
        </state>
        <state id="pre_result_assessment_wait">
            <onentry>
                <log expr="'Entering State: Wait (Collecting data for 25 seconds)'" label="INFO" />
                <send delay="'25s'" event="wait.finish" />
            </onentry>
            <transition event="wait.finish" target="result_assessment" />
            <onexit>
                <log expr="'Exiting State: Wait (Collected data for 25 seconds)'" label="INFO" />
            </onexit>
        </state>
    </state>
    <state id="result_assessment" initial="clean">
        <state id="clean">
            <onentry>
                <log expr="'Entering State: Cleanup components'" label="INFO" />
                <my_ns:cleanUp expr="executable" value="" />
            </onentry>
            <transition target="assessment_state_0" />
            <onexit>
                <log expr="'Exiting State: Done cleaning up'" label="INFO" />
            </onexit>
        </state>
        <state id="assessment_state_0">
            <onentry>
                <log expr="'Entering State: assessment_state_0'" label="INFO" />
                <my_ns:execute_program value="write_tra" />
            </onentry>
            <transition event="write_tra.execute_program.success" target="assessment_pre_exit_test_wait" />
            <onexit>
                <log expr="'Exiting State: assessment_state_0'" label="INFO" />
            </onexit>
        </state>
        <state id="assessment_pre_exit_test_wait">
            <onentry>
                <log expr="'Entering State: Wait (Collecting data for 5 seconds)'" label="INFO" />
                <send delay="'5s'" event="wait.finish" />
            </onentry>
            <transition event="wait.finish" target="exit_test" />
            <onexit>
                <log expr="'Exiting State: Wait (Collected data for 5 seconds)'" label="INFO" />
            </onexit>
        </state>
    </state>
    <state id="criteria_error">
        <onentry>
            <log expr="'criteria_error state entered - Exiting!'" label="ERROR" />
            <my_ns:error value="criteria" />
        </onentry>
        <transition target="exit_test" />
    </state>
    <state id="execution_error">
        <onentry>
            <log expr="'execution_error state entered - Exiting!'" label="ERROR" />
            <my_ns:error value="executionFail" />
        </onentry>
        <transition target="exit_test" />
    </state>
    <state id="abortion_error">
        <onentry>
            <log expr="'execution_error state entered - Exiting!'" label="ERROR" />
            <my_ns:error value="abortion" />
        </onentry>
        <transition target="exit_test" />
    </state>
    <final id="exit_test">
        <onentry>
            <log expr="'Entering State: exit_test'" label="INFO" />
            <my_ns:cleanUp expr="executable" value="" />
        </onentry>
        <onexit>
            <log expr="'Exiting State: exit_test'" label="INFO" />
        </onexit>
    </final>
</scxml>
